# yamllint disable rule:line-length
---
image: node:20-bullseye-slim

.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.0.0"
  dependencies: []

services:
  - docker:19.03.12-dind

variables:
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""

stages:
  - check-deploy-status
  - lint
  - prepare-tests
  - run-tests
  - build
  - test
  - push
  - dast
  - generate-deploy-config
  - deploy

include:
  - template: Jobs/Code-Quality.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Jobs/Code-Quality.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/DAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Security/Secret-Detection.gitlab-ci.yml

cache:
  key: npm
  policy: pull-push
  paths:
    - node_modules/

lint-job:
  stage: lint
  script:
    - echo "Linting..."
    - npm install gts --prefer-ofline
    - npm install eslint --prefer-ofline
    - npm run lint
    - echo "Linting complete."

prepare-tests:
  stage: prepare-tests
  script:
    - echo "Installing local dependencies..." 
    - npm ci
  artifacts:
    when: always
    paths:
      - node_modules/


run-tests:
  stage: run-tests
  script:
    - echo "Running tests..." 
    - npm run test

build:
  stage: build
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:latest"
  services:
    - docker:19.03.12-dind
  script:
    - |
      echo $FLYWHEEL_DEV_API_KEY > .google_cloud_credentials.json
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - export AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS="--network host --build-arg GITLAB_API_TOKEN=$GITLAB_API_TOKEN"
    - /build/build.sh
  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

.production: &production_template
  extends: .auto-deploy
  script:
    - auto-deploy check_kube_domain
    - auto-deploy ensure_namespace
    - auto-deploy create_secret
    - auto-deploy deploy

generate-deploy-config:
  stage: generate-deploy-config
  image: python:3.9
  script:
    - pip install Jinja2
    - pip install requests
    - GITLAB_TOKEN=$GITLAB_TOKEN python generate_ci.py --gen-chart-values
    - GITLAB_TOKEN=$GITLAB_TOKEN python generate_ci.py > generated-config.yml
  artifacts:
    paths:
      - generated-config.yml
      - .gitlab/

deploy-clients:
  stage: deploy
  when: manual
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include:
      - artifact: generated-config.yml
        job: generate-deploy-config
    strategy: depend
